#!/usr/bin/env python3
"""
Analizador L√©xico FUNCIONAL para Robot ABB IRB 120
Esta versi√≥n S√ç genera cu√°druplos y tabla de s√≠mbolos
"""

import re
from typing import List, Dict, Set, Any, Optional
from dataclasses import dataclass

@dataclass
class Token:
    """Representa un token del an√°lisis l√©xico"""
    tipo: str
    valor: str
    linea: int = 0
    columna: int = 0

@dataclass
class Simbolo:
    """Representa un s√≠mbolo en la tabla de s√≠mbolos"""
    id: str
    metodo: str
    parametro: int
    valor: int

@dataclass
class Cuadruplo:
    """Representa un cu√°druplo del c√≥digo intermedio"""
    operador: str
    operando1: str
    operando2: str
    resultado: str

class AnalizadorLexico:
    """Analizador l√©xico FUNCIONAL para el lenguaje de robots"""
    
    def __init__(self):
        self.tabla_simbolos: List[Simbolo] = []
        self.cuadruplos: List[Cuadruplo] = []
        self.contador_cuadruplos = 0
        self.errores: List[str] = []
        
        # Patrones de expresiones regulares
        self.patron_id = re.compile(r'^[A-Z]+[0-9]*$', re.IGNORECASE)
        self.patron_valor = re.compile(r'^\d+$')
        
        # Comandos v√°lidos
        self.comandos: Set[str] = {
            'base', 'codo', 'hombro', 'garra', 'velocidad', 'repetir'
        }
        
        # Rangos v√°lidos para cada comando (ABB IRB 120 + Robotiq 2F-85)
        self.rangos = {
            'base': (0, 360),
            'hombro': (0, 180),
            'codo': (0, 180),
            'garra': (0, 85),  # Robotiq 2F-85: 0-85mm
            'velocidad': (1, 100),  # Porcentaje de velocidad
            'repetir': (1, 100)
        }
        
    def analizar(self, entrada: str) -> Dict[str, Any]:
        """
        Analiza el c√≥digo de entrada y retorna los resultados COMPLETOS
        """
        # Limpiar estado anterior
        self.tabla_simbolos.clear()
        self.cuadruplos.clear()
        self.errores.clear()
        self.contador_cuadruplos = 0
        
        print(f"üîç Iniciando an√°lisis del c√≥digo:")
        print(f"   C√≥digo: {repr(entrada)}")
        
        # Construir resultados
        resultado = {
            'exito': False,
            'salida': '',
            'tokens': [],
            'tabla_simbolos': [],
            'cuadruplos': [],
            'errores': []
        }
        
        try:
            # Realizar an√°lisis COMPLETO
            salida_html = self._analizar_codigo_completo(entrada)
            
            print(f"üìä An√°lisis completado:")
            print(f"   S√≠mbolos: {len(self.tabla_simbolos)}")
            print(f"   Cu√°druplos: {len(self.cuadruplos)}")
            print(f"   Errores: {len(self.errores)}")
            
            # Compilar resultados
            resultado.update({
                'exito': len(self.errores) == 0,
                'salida': salida_html,
                'tabla_simbolos': [self._simbolo_to_dict(s) for s in self.tabla_simbolos],
                'cuadruplos': [self._cuadruplo_to_dict(c) for c in self.cuadruplos],
                'errores': self.errores.copy()
            })
            
        except Exception as e:
            error_msg = f"Error inesperado: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.errores.append(error_msg)
            resultado['salida'] = f"<div style='color: red;'>‚ùå {error_msg}</div>"
            resultado['errores'] = self.errores.copy()
            
        return resultado
        
    def _analizar_codigo_completo(self, entrada: str) -> str:
        """Realiza el an√°lisis l√©xico, sint√°ctico y sem√°ntico COMPLETO"""
        
        # Inicializar buffers de salida
        salida_lexico = ["<h2 style='color: #2c3e50;'>üîç An√°lisis L√©xico:</h2>"]
        salida_sintactico = ["<h2 style='color: #2c3e50;'>üß© An√°lisis Sint√°ctico:</h2>"]
        salida_semantico = ["<h2 style='color: #2c3e50;'>üß† An√°lisis Sem√°ntico:</h2>"]
        
        if not entrada.strip():
            error = "C√≥digo vac√≠o"
            salida_lexico.append(f"<div style='color: red;'>‚ùå Error: {error}</div>")
            self.errores.append(error)
            return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
        
        # Tokenizar entrada
        palabras = entrada.split()
        i = 0
        
        print(f"üî§ Palabras encontradas: {palabras}")
        
        while i < len(palabras):
            palabra_actual = palabras[i]
            print(f"   Procesando palabra {i}: '{palabra_actual}' (quedan {len(palabras) - i - 1} palabras)")
            
            # Debug: mostrar las pr√≥ximas 3 palabras
            if i + 3 < len(palabras):
                print(f"      Siguientes: '{palabras[i+1]}', '{palabras[i+2]}', '{palabras[i+3]}'")
            elif i + 2 < len(palabras):
                print(f"      Siguientes: '{palabras[i+1]}', '{palabras[i+2]}'")
            elif i + 1 < len(palabras):
                print(f"      Siguiente: '{palabras[i+1]}'")
            
            try:
                # Validaci√≥n l√©xica b√°sica
                if not re.match(r'^[a-zA-Z0-9.={}]+$', palabra_actual):
                    error = f"Token inv√°lido: '{palabra_actual}'"
                    salida_lexico.append(f"<div style='color: red;'>‚ùå Error l√©xico: {error}</div>")
                    self.errores.append(error)
                    return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
                
                salida_lexico.append(f"<div style='color: green;'>‚úî Token v√°lido: <strong>{palabra_actual}</strong></div>")
                
                # Declaraci√≥n de robot
                if palabra_actual.lower() == 'robot':
                    i = self._procesar_declaracion_robot(palabras, i, salida_sintactico, salida_semantico)
                    if i == -1:  # Error
                        return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
                    continue
                
                # Comandos de robot
                if '.' in palabra_actual and i + 2 < len(palabras):
                    print(f"      üìç Detectado comando de robot: {palabra_actual}")
                    # Verificar si es comando repetir con bloque
                    if (i + 3 < len(palabras) and 
                        palabra_actual.lower().endswith('.repetir') and 
                        palabras[i + 1] == '=' and 
                        palabras[i + 3] == '{'):
                        print(f"      üîÅ Es comando repetir con bloque")
                        # Procesar comando repetir con bloque
                        i = self._procesar_repetir(palabras, i, salida_sintactico, salida_semantico)
                        if i == -1:  # Error
                            return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
                        continue
                    else:
                        print(f"      ü§ñ Es comando normal")
                        # Procesar comando normal
                        i = self._procesar_comando_robot(palabras, i, salida_sintactico, salida_semantico)
                        if i == -1:  # Error
                            return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
                        continue
                
                print(f"      ‚ö†Ô∏è Token no reconocido en contexto actual")
                
                # Token no reconocido en este contexto
                error = f"Expresi√≥n incompleta o inv√°lida: '{palabra_actual}'"
                salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
                self.errores.append(error)
                return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
                
            except Exception as e:
                error = f"Error procesando '{palabra_actual}': {str(e)}"
                print(f"‚ùå {error}")
                self.errores.append(error)
                return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
        
        # Si llegamos aqu√≠, el an√°lisis fue exitoso
        salida_semantico.append("<div style='color: green; font-weight: bold;'>‚úî An√°lisis sem√°ntico completado sin errores</div>")
        
        return self._generar_salida_html(salida_lexico, salida_sintactico, salida_semantico)
        
    def _procesar_declaracion_robot(self, palabras: List[str], i: int, 
                                   salida_sintactico: List[str], 
                                   salida_semantico: List[str]) -> int:
        """Procesa la declaraci√≥n de un robot"""
        
        print(f"   üìù Procesando declaraci√≥n de robot en posici√≥n {i}")
        
        if i + 1 >= len(palabras):
            error = "Falta identificador tras 'Robot'"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        robot_id = palabras[i + 1]
        print(f"      ID del robot: '{robot_id}'")
        
        if not self.patron_id.match(robot_id):
            error = f"Identificador inv√°lido: '{robot_id}'"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Verificar si ya existe
        if any(s.id.lower() == robot_id.lower() and s.metodo == 'robot' 
               for s in self.tabla_simbolos):
            error = f"Robot ya declarado: '{robot_id}'"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Agregar a tabla de s√≠mbolos
        simbolo = Simbolo(robot_id, 'robot', 0, 0)
        self.tabla_simbolos.append(simbolo)
        print(f"      ‚úÖ S√≠mbolo agregado: {simbolo}")
        
        # Generar cu√°druplo
        cuadruplo = Cuadruplo('CREATE', 'Robot', '‚Äî', robot_id)
        self.cuadruplos.append(cuadruplo)
        print(f"      ‚úÖ Cu√°druplo generado: {cuadruplo}")
        
        salida_sintactico.append(f"<div style='color: green;'>‚úî Declaraci√≥n de robot: <strong>{robot_id}</strong></div>")
        salida_semantico.append(f"<div style='color: green;'>‚úî Robot <strong>{robot_id}</strong> declarado correctamente</div>")
        
        return i + 2
        
    def _procesar_comando_robot(self, palabras: List[str], i: int,
                               salida_sintactico: List[str],
                               salida_semantico: List[str]) -> int:
        """Procesa un comando de robot (ID.comando = valor)"""
        
        comando_completo = palabras[i]
        operador = palabras[i + 1]
        valor_str = palabras[i + 2]
        
        print(f"   ü§ñ Procesando comando: {comando_completo} {operador} {valor_str}")
        
        # Parsear ID.comando
        partes = comando_completo.split('.')
        if len(partes) != 2:
            error = f"Se esperaba ID.comando: '{comando_completo}'"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        robot_id, comando = partes
        print(f"      Robot ID: '{robot_id}', Comando: '{comando}'")
        
        # Verificar operador
        if operador != '=':
            error = f"Se esperaba '=' despu√©s del comando: '{operador}'"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Verificar que el robot est√© declarado
        if not any(s.id.lower() == robot_id.lower() and s.metodo == 'robot' 
                  for s in self.tabla_simbolos):
            error = f"Robot no declarado: '{robot_id}'"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Verificar comando v√°lido
        if comando.lower() not in self.comandos:
            error = f"Comando inv√°lido: '{comando}'"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Validar valor num√©rico
        if not self.patron_valor.match(valor_str):
            error = f"Valor num√©rico inv√°lido: '{valor_str}'"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        valor = int(valor_str)
        print(f"      Valor num√©rico: {valor}")
        
        # Validar rango
        if comando.lower() in self.rangos:
            min_val, max_val = self.rangos[comando.lower()]
            if not (min_val <= valor <= max_val):
                error = f"Valor fuera de rango para {comando}: {valor} (rango: {min_val}-{max_val})"
                salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
                self.errores.append(error)
                return -1
                
        # Actualizar tabla de s√≠mbolos
        self._actualizar_simbolo(robot_id, comando.lower(), valor)
        
        # Generar cu√°druplos
        self._generar_cuadruplo_comando(robot_id, comando.lower(), valor)
        
        salida_sintactico.append(f"<div style='color: green;'>‚úî Asignaci√≥n: <strong>{comando_completo} = {valor}</strong></div>")
        salida_semantico.append(f"<div style='color: green;'>‚úî Valor v√°lido asignado a <strong>{comando_completo}</strong></div>")
        
        return i + 3
    def _procesar_repetir(self, palabras: List[str], i: int,
                         salida_sintactico: List[str],
                         salida_semantico: List[str]) -> int:
        """Procesa el comando repetir con bloque { }"""
        
        comando_completo = palabras[i]
        operador = palabras[i + 1]
        valor_str = palabras[i + 2]
        llave_abre = palabras[i + 3]
        
        print(f"   üîÅ Procesando repetir: {comando_completo} {operador} {valor_str} {llave_abre}")
        
        # Parsear ID.comando
        partes = comando_completo.split('.')
        if len(partes) != 2 or partes[1].lower() != 'repetir':
            error = f"Se esperaba ID.repetir: '{comando_completo}'"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        robot_id = partes[0]
        
        # Verificar operador
        if operador != '=':
            error = f"Se esperaba '=' despu√©s de repetir: '{operador}'"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Verificar llave de apertura
        if llave_abre != '{':
            error = f"Se esperaba '{{' para abrir bloque: '{llave_abre}'"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Verificar que el robot est√© declarado
        if not any(s.id.lower() == robot_id.lower() and s.metodo == 'robot' 
                  for s in self.tabla_simbolos):
            error = f"Robot no declarado: '{robot_id}'"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Validar valor de repetici√≥n
        if not self.patron_valor.match(valor_str):
            error = f"Valor de repetici√≥n inv√°lido: '{valor_str}'"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        repeticiones = int(valor_str)
        min_rep, max_rep = self.rangos['repetir']
        
        if not (min_rep <= repeticiones <= max_rep):
            error = f"Repeticiones fuera de rango: {repeticiones} (rango: {min_rep}-{max_rep})"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Buscar el bloque hasta encontrar }
        j = i + 4
        bloque = []
        nivel_llaves = 1
        
        while j < len(palabras) and nivel_llaves > 0:
            if palabras[j] == '{':
                nivel_llaves += 1
            elif palabras[j] == '}':
                nivel_llaves -= 1
                
            if nivel_llaves > 0:
                bloque.append(palabras[j])
            j += 1
            
        if nivel_llaves > 0:
            error = "Falta '}' para cerrar el bloque de repetici√≥n"
            salida_sintactico.append(f"<div style='color: red;'>‚ùå Error sint√°ctico: {error}</div>")
            self.errores.append(error)
            return -1
            
        print(f"      Bloque encontrado: {bloque}")
        
        # Analizar el contenido del bloque
        try:
            self._analizar_bloque(bloque, robot_id, salida_sintactico, salida_semantico)
        except Exception as e:
            error = f"Error en bloque de repetici√≥n: {str(e)}"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
            
        # Si llegamos aqu√≠, todo est√° bien
        # Actualizar tabla de s√≠mbolos para repetir
        self._actualizar_simbolo(robot_id, 'repetir', repeticiones)
        
        # Generar cu√°druplos para el bucle
        loop_var = f"contador{self.contador_cuadruplos}"
        loop_id = f"loop{self.contador_cuadruplos}"
        self.contador_cuadruplos += 1
        
        cuadruplos_loop = [
            Cuadruplo('CREATE', robot_id, '‚Äî', loop_var),
            Cuadruplo('=', valor_str, '‚Äî', loop_var),
            Cuadruplo('CREATE', 'Loop', '‚Äî', loop_id),
            Cuadruplo('ASSOC', loop_var, '‚Äî', f"{loop_id}.contador"),
            Cuadruplo('ASSOC', loop_id, '‚Äî', f"{robot_id}.repetir"),
            Cuadruplo('BEGIN_LOOP', str(repeticiones), '‚Äî', loop_id),
        ]
        
        self.cuadruplos.extend(cuadruplos_loop)
        
        # Marcar los comandos del bloque como parte del bucle
        comandos_bucle_start = len(self.cuadruplos)
        
        # Analizar el contenido del bloque y generar sus cu√°druplos
        try:
            self._analizar_bloque(bloque, robot_id, salida_sintactico, salida_semantico)
        except Exception as e:
            error = f"Error en bloque de repetici√≥n: {str(e)}"
            salida_semantico.append(f"<div style='color: red;'>‚ùå Error sem√°ntico: {error}</div>")
            self.errores.append(error)
            return -1
        
        # Agregar cu√°druplo de fin de bucle
        self.cuadruplos.append(Cuadruplo('END_LOOP', loop_id, str(repeticiones), '‚Äî'))
        
        print(f"      ‚úÖ Cu√°druplos de bucle generados: {len(cuadruplos_loop) + 1}")
        
        salida_sintactico.append(f"<div style='color: green;'>‚úî Bloque de repetici√≥n: <strong>{repeticiones} iteraciones</strong></div>")
        salida_semantico.append(f"<div style='color: green;'>‚úî Bloque de repetici√≥n v√°lido con <strong>{repeticiones}</strong> comandos</div>")
        
        return j
        
    def _analizar_bloque(self, bloque: List[str], robot_id: str, 
                        salida_sintactico: List[str], salida_semantico: List[str]):
        """Analiza el contenido de un bloque de repetici√≥n"""
        print(f"      üîç Analizando bloque: {bloque}")
        
        i = 0
        comandos_bloque = 0
        
        while i < len(bloque):
            if i + 2 >= len(bloque):
                break
                
            comando_completo = bloque[i]
            operador = bloque[i + 1]
            valor_str = bloque[i + 2]
            
            print(f"         Comando en bloque: {comando_completo} {operador} {valor_str}")
            
            # Validaciones b√°sicas
            if '.' not in comando_completo:
                i += 1
                continue
                
            partes = comando_completo.split('.')
            if len(partes) != 2:
                raise Exception(f"Sintaxis inv√°lida en bloque: {comando_completo}")
                
            bloque_robot_id, comando = partes
            
            if operador != '=':
                raise Exception(f"Se esperaba '=' en bloque: {comando_completo} {operador}")
                
            if not self.patron_valor.match(valor_str):
                raise Exception(f"Valor inv√°lido en bloque: {valor_str}")
                
            if comando.lower() not in self.comandos or comando.lower() == 'repetir':
                raise Exception(f"Comando inv√°lido en bloque: {comando}")
                
            if bloque_robot_id.lower() != robot_id.lower():
                raise Exception(f"Robot diferente en bloque: {bloque_robot_id} (esperado: {robot_id})")
                
            valor = int(valor_str)
            if comando.lower() in self.rangos:
                min_val, max_val = self.rangos[comando.lower()]
                if not (min_val <= valor <= max_val):
                    raise Exception(f"Valor fuera de rango en bloque: {comando} = {valor}")
            
            # Generar cu√°druplos para el bloque (se ejecutar√°n repetidas veces)
            self._generar_cuadruplo_comando(bloque_robot_id, comando.lower(), valor)
            comandos_bloque += 1
            
            i += 3
            
        if comandos_bloque == 0:
            raise Exception("Bloque de repetici√≥n vac√≠o")
            
        print(f"      ‚úÖ Bloque v√°lido con {comandos_bloque} comandos")
            
    def _actualizar_simbolo(self, robot_id: str, comando: str, valor: int):
        """Actualiza o agrega un s√≠mbolo en la tabla"""
        # Remover s√≠mbolo existente si existe
        self.tabla_simbolos = [s for s in self.tabla_simbolos 
                              if not (s.id.lower() == robot_id.lower() and s.metodo.lower() == comando.lower())]
        
        # Agregar nuevo s√≠mbolo
        simbolo = Simbolo(robot_id, comando, 1, valor)
        self.tabla_simbolos.append(simbolo)
        print(f"      ‚úÖ S√≠mbolo actualizado: {simbolo}")
        
    def _generar_cuadruplo_comando(self, robot_id: str, comando: str, valor: int):
        """Genera cu√°druplos para un comando espec√≠fico"""
        if comando == 'velocidad':
            temp_vel = f"vel{self.contador_cuadruplos}"
            self.contador_cuadruplos += 1
            cuadruplos_vel = [
                Cuadruplo('CREATE', robot_id, '‚Äî', temp_vel),
                Cuadruplo('=', str(valor), '‚Äî', temp_vel),
                Cuadruplo('ASSOC', temp_vel, '‚Äî', f"{robot_id}.velocidad")
            ]
            self.cuadruplos.extend(cuadruplos_vel)
            print(f"      ‚úÖ Cu√°druplos de velocidad generados: {len(cuadruplos_vel)}")
        else:
            cuadruplo = Cuadruplo('CALL', robot_id, str(valor), comando)
            self.cuadruplos.append(cuadruplo)
            print(f"      ‚úÖ Cu√°druplo de comando generado: {cuadruplo}")
        """Actualiza o agrega un s√≠mbolo en la tabla"""
        # Remover s√≠mbolo existente si existe
        self.tabla_simbolos = [s for s in self.tabla_simbolos 
                              if not (s.id.lower() == robot_id.lower() and s.metodo.lower() == comando.lower())]
        
        # Agregar nuevo s√≠mbolo
        simbolo = Simbolo(robot_id, comando, 1, valor)
        self.tabla_simbolos.append(simbolo)
        print(f"      ‚úÖ S√≠mbolo actualizado: {simbolo}")
        
    def _generar_cuadruplo_comando(self, robot_id: str, comando: str, valor: int):
        """Genera cu√°druplos para un comando espec√≠fico"""
        if comando == 'velocidad':
            temp_vel = f"vel{self.contador_cuadruplos}"
            self.contador_cuadruplos += 1
            cuadruplos_vel = [
                Cuadruplo('CREATE', robot_id, '‚Äî', temp_vel),
                Cuadruplo('=', str(valor), '‚Äî', temp_vel),
                Cuadruplo('ASSOC', temp_vel, '‚Äî', f"{robot_id}.velocidad")
            ]
            self.cuadruplos.extend(cuadruplos_vel)
            print(f"      ‚úÖ Cu√°druplos de velocidad generados: {len(cuadruplos_vel)}")
        else:
            cuadruplo = Cuadruplo('CALL', robot_id, str(valor), comando)
            self.cuadruplos.append(cuadruplo)
            print(f"      ‚úÖ Cu√°druplo de comando generado: {cuadruplo}")
            
    def _generar_salida_html(self, salida_lexico: List[str], 
                           salida_sintactico: List[str], 
                           salida_semantico: List[str]) -> str:
        """Genera la salida HTML completa"""
        
        html_parts = []
        
        # An√°lisis l√©xico
        html_parts.extend(salida_lexico)
        html_parts.append("<br>")
        
        # An√°lisis sint√°ctico
        html_parts.extend(salida_sintactico)
        html_parts.append("<br>")
        
        # An√°lisis sem√°ntico
        html_parts.extend(salida_semantico)
        html_parts.append("<br>")
        
        # Tabla de s√≠mbolos (SOLO si no hay errores)
        if self.tabla_simbolos and len(self.errores) == 0:
            html_parts.append("<h2 style='color: #2c3e50;'>üîß Tabla de S√≠mbolos:</h2>")
            html_parts.append("<table border='1' style='border-collapse: collapse; width: 100%; margin: 10px 0; font-family: monospace;'>")
            html_parts.append("<tr style='background-color: #3498db; color: white;'>")
            html_parts.append("<th style='padding: 8px;'>ID</th><th style='padding: 8px;'>M√âTODO</th><th style='padding: 8px;'>PAR√ÅMETRO</th><th style='padding: 8px;'>VALOR</th>")
            html_parts.append("</tr>")
            
            for simbolo in self.tabla_simbolos:
                html_parts.append("<tr style='background-color: #ecf0f1;'>")
                html_parts.append(f"<td style='padding: 8px; font-weight: bold;'>{simbolo.id}</td>")
                html_parts.append(f"<td style='padding: 8px;'>{simbolo.metodo}</td>")
                html_parts.append(f"<td style='padding: 8px;'>{simbolo.parametro}</td>")
                html_parts.append(f"<td style='padding: 8px; color: #e74c3c; font-weight: bold;'>{simbolo.valor}</td>")
                html_parts.append("</tr>")
                
            html_parts.append("</table>")
            
        # Tabla de cu√°druplos (SOLO si no hay errores)
        if self.cuadruplos and len(self.errores) == 0:
            html_parts.append("<h2 style='color: #2c3e50;'>üìä Tabla de Cu√°druplos:</h2>")
            html_parts.append("<table border='1' style='border-collapse: collapse; width: 100%; margin: 10px 0; font-family: monospace;'>")
            html_parts.append("<tr style='background-color: #27ae60; color: white;'>")
            html_parts.append("<th style='padding: 8px;'>N¬∫</th><th style='padding: 8px;'>Operador</th><th style='padding: 8px;'>Operando 1</th><th style='padding: 8px;'>Operando 2</th><th style='padding: 8px;'>Resultado</th>")
            html_parts.append("</tr>")
            
            for i, cuadruplo in enumerate(self.cuadruplos):
                bg_color = "#d5f4e6" if i % 2 == 0 else "#ffffff"
                html_parts.append(f"<tr style='background-color: {bg_color};'>")
                html_parts.append(f"<td style='padding: 8px; font-weight: bold;'>{i}</td>")
                html_parts.append(f"<td style='padding: 8px; color: #8e44ad; font-weight: bold;'>{cuadruplo.operador}</td>")
                html_parts.append(f"<td style='padding: 8px;'>{cuadruplo.operando1}</td>")
                html_parts.append(f"<td style='padding: 8px;'>{cuadruplo.operando2}</td>")
                html_parts.append(f"<td style='padding: 8px; color: #e67e22; font-weight: bold;'>{cuadruplo.resultado}</td>")
                html_parts.append("</tr>")
                
            html_parts.append("</table>")
        
        # Mensaje final
        if len(self.errores) == 0:
            html_parts.append("<div style='background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 15px; border-radius: 5px; margin: 10px 0; font-weight: bold; font-size: 16px;'>")
            html_parts.append("üéâ ¬°An√°lisis completado exitosamente! El c√≥digo est√° listo para ejecutar en el robot.")
            html_parts.append(f"<br>üìä Generados: {len(self.tabla_simbolos)} s√≠mbolos y {len(self.cuadruplos)} cu√°druplos")
            html_parts.append("</div>")
        
        return ''.join(html_parts)
        
    def _simbolo_to_dict(self, simbolo: Simbolo) -> Dict[str, Any]:
        """Convierte un s√≠mbolo a diccionario"""
        return {
            'id': simbolo.id,
            'metodo': simbolo.metodo,
            'parametro': simbolo.parametro,
            'valor': simbolo.valor
        }
        
    def _cuadruplo_to_dict(self, cuadruplo: Cuadruplo) -> Dict[str, Any]:
        """Convierte un cu√°druplo a diccionario"""
        return {
            'operador': cuadruplo.operador,
            'operando1': cuadruplo.operando1,
            'operando2': cuadruplo.operando2,
            'resultado': cuadruplo.resultado
        }