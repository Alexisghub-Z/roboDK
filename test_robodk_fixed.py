#!/usr/bin/env python3
"""
Script para probar la conexi√≥n con RoboDK (Compatible con v5.9+)
"""

def test_robodk_import():
    """Prueba importar RoboDK"""
    print("üîç Probando importaci√≥n de RoboDK...")
    try:
        import robodk
        from robodk import robolink
        print("‚úÖ RoboDK importado correctamente")
        print("   Versi√≥n: 5.9.0+ (compatible)")
        return True
    except ImportError as e:
        print(f"‚ùå Error importando RoboDK: {e}")
        return False

def test_robodk_connection():
    """Prueba conexi√≥n con RoboDK"""
    print("\nüîå Probando conexi√≥n con RoboDK...")
    try:
        from robodk import robolink
        
        # Intentar conectar
        rdk = robolink.Robolink()
        
        # M√©todo alternativo para verificar conexi√≥n
        try:
            # Intentar obtener algo b√°sico
            version = rdk.Version()
            print("‚úÖ Conexi√≥n con RoboDK exitosa")
            print(f"   Versi√≥n RoboDK: {version}")
            return True
        except Exception as e:
            print("‚ùå No se puede conectar con RoboDK")
            print(f"   Error: {e}")
            print("   Aseg√∫rate de que RoboDK est√© ejecut√°ndose")
            return False
            
    except Exception as e:
        print(f"‚ùå Error conectando con RoboDK: {e}")
        return False

def test_robot_detection():
    """Prueba detecci√≥n del robot"""
    print("\nü§ñ Buscando robots en la estaci√≥n...")
    try:
        from robodk import robolink
        
        rdk = robolink.Robolink()
        
        # Verificar conexi√≥n primero
        try:
            rdk.Version()
        except:
            print("‚ùå RoboDK no disponible")
            return False
            
        # Buscar robots usando m√©todo compatible
        try:
            robots = rdk.ItemList(robolink.ITEM_TYPE_ROBOT)
        except:
            # M√©todo alternativo si ItemList no funciona
            try:
                robots = rdk.getItemList(robolink.ITEM_TYPE_ROBOT)
            except:
                print("‚ùå No se pueden obtener robots de la estaci√≥n")
                return False
        
        if not robots:
            print("‚ö†Ô∏è No se encontraron robots en la estaci√≥n")
            print("   SOLUCI√ìN:")
            print("   1. Abre RoboDK")
            print("   2. File ‚Üí Add ‚Üí Robot ‚Üí ABB ‚Üí IRB 120-3/0.6")
            print("   3. Ejecuta este test nuevamente")
            return False
            
        print(f"‚úÖ Encontrados {len(robots)} robot(s):")
        for robot in robots:
            try:
                print(f"   - {robot.Name()}")
            except:
                print(f"   - Robot detectado")
            
        # Buscar espec√≠ficamente ABB IRB 120
        irb120_variants = [
            'ABB IRB 120-3/0.6',
            'IRB 120',
            'ABB IRB120',
            'IRB120-3/0.6',
            'Robot'  # Nombre por defecto
        ]
        
        robot_encontrado = None
        for variant in irb120_variants:
            try:
                robot = rdk.Item(variant, robolink.ITEM_TYPE_ROBOT)
                # Verificar si el robot es v√°lido intentando obtener su nombre
                robot.Name()
                robot_encontrado = robot
                print(f"‚úÖ Robot encontrado: {variant}")
                break
            except:
                continue
                
        if robot_encontrado:
            # Probar movimiento simple
            print("üîÑ Probando movimiento b√°sico...")
            try:
                joints_home = [0, 0, 0, 0, 90, 0]
                robot_encontrado.MoveJ(joints_home)
                print("‚úÖ Movimiento de prueba exitoso")
            except Exception as e:
                print(f"‚ö†Ô∏è Advertencia en movimiento: {e}")
                print("   (El robot est√° detectado pero puede necesitar configuraci√≥n)")
        else:
            print("‚ö†Ô∏è Robot ABB IRB 120 no encontrado con nombres esperados")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error detectando robots: {e}")
        return False

def test_simple_command():
    """Prueba comando simple en RoboDK"""
    print("\nüß™ Probando comando simple...")
    try:
        from robodk import robolink
        
        rdk = robolink.Robolink()
        
        # Comando muy simple para verificar comunicaci√≥n
        try:
            station_name = rdk.getParam("STATIONFILE")
            print(f"‚úÖ Estaci√≥n activa: {station_name}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Comando simple fall√≥: {e}")
            print("   RoboDK est√° conectado pero puede tener problemas")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en comando simple: {e}")
        return False

def give_solutions():
    """Da soluciones espec√≠ficas"""
    print("\nüîß PASOS PARA SOLUCIONAR:")
    print("=" * 40)
    print("1. üìÇ ABRIR ROBODK:")
    print("   - Busca 'RoboDK' en el men√∫ inicio")
    print("   - Abre la aplicaci√≥n")
    print("   - Deja la ventana abierta")
    print()
    print("2. ü§ñ AGREGAR ROBOT:")
    print("   - En RoboDK: File ‚Üí Add ‚Üí Robot")
    print("   - Busca: ABB ‚Üí IRB 120-3/0.6")
    print("   - Click 'Add' o 'Download'")
    print()
    print("3. ‚úÖ VERIFICAR:")
    print("   - Deber√≠as ver el robot en 3D")
    print("   - Ejecuta: python test_robodk_fixed.py")
    print()
    print("4. üîå CONECTAR EN TU APP:")
    print("   - Ejecuta: python main.py")
    print("   - Click en 'ü§ñ Conectar Robot'")

def main():
    """Funci√≥n principal de prueba"""
    print("üß™ PRUEBA DE CONEXI√ìN ROBODK (v5.9+ Compatible)")
    print("=" * 50)
    
    tests = [
        test_robodk_import(),
        test_robodk_connection(),
        test_robot_detection(),
        test_simple_command()
    ]
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS:")
    
    test_names = [
        "Importaci√≥n RoboDK",
        "Conexi√≥n RoboDK", 
        "Detecci√≥n de Robot",
        "Comando Simple"
    ]
    
    all_passed = True
    for name, result in zip(test_names, tests):
        status = "‚úÖ OK" if result else "‚ùå FALLO"
        print(f"   {name}: {status}")
        if not result:
            all_passed = False
    
    if all_passed:
        print("\nüéâ ¬°RoboDK est√° completamente listo!")
        print("   Ejecuta: python main.py")
        print("   Click en 'ü§ñ Conectar Robot'")
    else:
        give_solutions()
        
    print("=" * 50)

if __name__ == "__main__":
    main()